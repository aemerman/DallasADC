private void FFT3(int filenum, double freq)
        {
            const int sampLength = 6144; //Number of data points used
            double[] result = new double[4];    // For populating our signal histogram
            string chartPath = filepath.Replace("OUTPUT", "OUTPUTINL");

            double sampFreq;     //Sampling Frequency
            string chipyear;
            Title[] atlastitle = new Title[4];
            Chart chart1 = new Chart();
            chart1.Size = new System.Drawing.Size(1000, 1000);

            // Reset all chart values
            chart1.ChartAreas.Clear();
            chart1.Series.Clear();
            chart1.Titles.Clear();
            chart1.Legends.Clear();

            //----Creating Histograms/Graphs----//
            double[][] signalHisto = new double[4][];
            for (int isig = 0; isig < 4; isig++)
            {
                chart1.ChartAreas.Add(new ChartArea());
                chart1.ChartAreas[isig].AxisY.Minimum = 0;
                chart1.ChartAreas[isig].AxisY.Maximum = 4000;
                chart1.ChartAreas[isig].AxisX.MajorGrid.Enabled = false;
                chart1.ChartAreas[isig].AxisY.MajorGrid.Enabled = false;
                chart1.ChartAreas[isig].AxisX.Title = "Samples (100 kHz, 1 mV signal)";
                chart1.ChartAreas[isig].AxisY.Title = "ADC Counts";

                atlastitle[isig] = new Title{
                    Text = "ATLAS Upgrade",
                    Font = new Font(FontFamily.GenericSansSerif,12, FontStyle.Bold | FontStyle.Italic),
                    DockedToChartArea = chart1.ChartAreas[isig].Name,
                    Alignment = ContentAlignment.TopRight
                };
                chart1.Titles.Add(atlastitle[isig]);

                var seriesSignal = new System.Windows.Forms.DataVisualization.Charting.Series
                {
                    Name = "Fourier Transform " + isig,
                    Color = Color.Red,
                    IsVisibleInLegend = false,
                    IsXValueIndexed = true,
                    ChartType = SeriesChartType.Line,
                    ChartArea = chart1.ChartAreas[isig].Name
                };
                chart1.Series.Add(seriesSignal);

                signalHisto[isig] = new double[sampLength];
                for (int bin = 0; bin < sampLength; bin++)
                {
                    signalHisto[isig][bin] = 0.0;
                }
            }

            //----Setting Sampling Frequency----//

            switch ((int)(5 * freq))      //To bypass C# rules about switching doubles
            {
                case 25:
                    sampFreq = 40; freq = 5.0065104167; break;
                case 90:
                    sampFreq = 40.113166485310122; break;
                case 50:
                    sampFreq = 40; freq = 9.967447917; break;
                case 10:
                    sampFreq = 40.0000000667; freq = 1.9986979167; break;
                case 1:
                    sampFreq = 40.0; break;
                default:
                    sampFreq = 40.0; break;
            }
            System.IO.StreamReader file = null;
            try
            {
                string chipdataFile = filepath + String.Format("FFTdata_chip_{0}.txt", filenum);
                file = new System.IO.StreamReader(chipdataFile);
            }
            catch
            {
                MessageBox.Show(String.Format("Couldn't convert '{0}' to a number", filenum), "Oops", MessageBoxButtons.OK);
                return;
            }


            //----Fill the histogram----//
            // We want to skip the first 20 entries incase something weird happens.
            // We want to fill the histrogram bins from the beginning
            // so we have an offset from the loop counter.
            string[] line;
            string[] separators = { " " };
            for (int sampNum = 1; sampNum <= sampLength + 20; sampNum++)
            {
                line = file.ReadLine().Split(separators, StringSplitOptions.RemoveEmptyEntries);
                if (sampNum > 20)
                {
                    for (int isig = 0; isig < 4; isig++)
                    {
                        result[isig] = Convert.ToDouble(line[isig]);
                        signalHisto[isig][sampNum - 20 - 1] = result[isig];
                        chart1.Series[isig].Points.AddXY(sampNum - 20 - 1, result[isig]);
                    }
                }
            }

            chart1.SaveImage(chartPath + "signal_" + filenum + ".png",ChartImageFormat.Png);

            //---- Start to Take FFTs----//
            double[] sfdr = new double[4];
            double[] enob = new double[4];
            double[] sinad = new double[4];
            double[] sinadNoHarm = new double[4];

            char[][][] outFreq = new char[4][][];
            for (int i = 0; i < 4; i++)
            {
                outFreq[i] = new char[5][];
                for (int j = 0; j < 5; j++)
                {
                    outFreq[i][j] = new char[25];
                }
            }


            // Reset Charts
            chart1.ChartAreas.Clear();
            chart1.Series.Clear();
            chart1.Legends.Clear();
            chart1.Titles.Clear();

            // Start doing FFTs for each channel
            for (int isig = 0; isig < 4; isig++)
            {
                int numPoints = 0;      //Keeping track of pts in FFT
                int ithData = 0;        //For help looping through FFT
                int numHarm = -1;       //Counting how many harmonics found

                Dictionary<double, double> theData = new Dictionary<double, double>();  //Keeping track of level of each frequency

                double binCont;         // Help with filling FFT
                double sum2 = 0.0;           // For Calculating SINAD
                double bin1, binMax = 0.0;    // For Manipulating output of FFT
                double[] aHarmFreq = new double[150];   //Aliased Harmonics
                double fourierFreq, tempFreq = 0;  //Help with looping through dictionary
                double noDistSum2 = 0;

                double[] fourierHisto = new double[sampLength];
                fftw_complexarray fourierComplex = new fftw_complexarray(sampLength);

                //----Do the FFT----//

                //Unmanaged FFT
                GCHandle fin = GCHandle.Alloc(signalHisto[isig], GCHandleType.Pinned);
                IntPtr fout = fourierComplex.Handle;

                IntPtr plan = fftw.dft_r2c(1, new int[] {sampLength}, fin.AddrOfPinnedObject(), fout, fftw_flags.Estimate);
                fftw.execute(plan);

                //Managed FFT
                /*double[] signalComplex = new double[sampLength * 2];
                for (int i = 0; i < sampLength * 2; i += 2)
                {
                    signalComplex[i] = signalHisto[isig][i / 2];
                    signalComplex[i + 1] = 0;
                }

                fftw_complexarray cin = new fftw_complexarray(signalHisto[isig]);   // Make input complexarray from signalHisto
                fftw_complexarray cout = new fftw_complexarray(sampLength * 2);   // Make new output complexarray

                fftw_plan mplan = fftw_plan.dft_r2c_1d(sampLength, cin, cout, fftw_flags.Estimate);
                mplan.Execute();*/
                double[] fourierOut = fourierComplex.GetData_double();

                double re, im;
                for (int i = 0; i < sampLength; i++)
                {
                    if (i < sampLength / 2 + 1)
                    {
                        re = fourierOut[2 * i];
                        im = fourierOut[2 * i + 1];
                    }
                    else{
                        re = fourierOut[2*(sampLength - i)];
                        im = -(fourierOut[2*(sampLength - i) + 1]);
                    }
                    fourierHisto[i] = Math.Sqrt(re*re + im*im);
                }


                //----Find the Second Largest Value----// 
                bin1 = fourierHisto[0];         // bin1 has the largest value, however
                fourierHisto[0] = 0;            // that isn't actually part of our data.
                fourierHisto[3072] = 0;
                Console.Write(String.Format("DC Component {0} = {1}\n",isig, bin1));
                binMax = fourierHisto.Max();        // The max value, our signal, is actually
                fourierHisto[0] = bin1;             // the second largest value, now in binMax.
                
                // Initialize fft chart for current channel
                chart1.ChartAreas.Add(new ChartArea());

                var seriesFFT = new System.Windows.Forms.DataVisualization.Charting.Series
                {
                    Name = "Fourier Transform " + isig,
                    Color = Color.Red,
                    IsVisibleInLegend = false,
                    IsXValueIndexed = true,
                    MarkerStyle = MarkerStyle.Square,
                    MarkerColor = Color.Red,
                    MarkerBorderWidth = 0,
                    ChartType = SeriesChartType.Line,
                    ChartArea = chart1.ChartAreas[isig].Name
                };
                chart1.Series.Add(seriesFFT);

                seriesFFT.Points.AddXY(0, 20*Math.Log10(Math.Abs(fourierHisto[1])/Math.Abs(binMax))); // Only added to make plot look nicer
                //----Normalize all the points to the maximum----//
                for (int i = 1; i < (sampLength / 2); i++)
                {
                    binCont = Math.Abs(fourierHisto[i]) / Math.Abs(binMax); // Normalizing to the maximum
                    theData[20 * Math.Log10(binCont)] = ((i) * sampFreq / sampLength);
                    seriesFFT.Points.AddXY((i) * sampFreq / sampLength, 20 * Math.Log10(binCont));
                    if (binCont != 1.0)
                    {            // This is all points except the signal
                        numPoints++;
                        sum2 += binCont * binCont;
                    } 
                }


                noDistSum2 += sum2;     // This is so we can make parallel calculations subtracting harmonics

                //----Find Relevant Harmonics----//
                // Harmonics occur at |+/- (k*sampFreq) +/- (n*signalFreq)|
                // There will be overcounting if we let both k and n go +/-
                // Keeping k positive, and for k=0 keeping n positive,thedata there is no overcounting

                for (int k = 0; k <= 20; k++)
                {
                    for (int ord = -55; ord <= 55; ord++)
                    {
                        if (k > 0 || ord >= 0)
                            tempFreq = Math.Abs(k * sampFreq + ord * freq);
                        if (tempFreq != freq && tempFreq < sampFreq / 2 && tempFreq > 0)
                        {     // Limits range of interesting harmonics
                            numHarm++;
                            aHarmFreq[numHarm] = tempFreq;
                        }
                    }
                }

                //----Printing the Highest Readings and Corresponding Freq----//

                var amps = theData.Keys.ToList();
                amps.Sort();

                foreach (double normAmp in amps)
                {
                    fourierFreq = theData[normAmp];
                    if ((ithData > (numPoints - 6)) && (ithData < numPoints))
                    {
                        outFreq[isig][numPoints - 1 - ithData] = String.Format("  {0:F2},   {1:F2}", fourierFreq, normAmp).ToCharArray();
                    }
                    if (ithData == numPoints - 1)
                    {
                        sfdr[isig] = normAmp;
                        // The SFDR is distance from signal (normalized to zero) to second largest
                        // value. This will be the normalized amplitude of the second last point
                        // since the last point is the signal (at 0 dB).
                    }
                    // This will remove the relevant harmonics so we can calculate SNR
                    for (int i = 0; i <= numHarm; i++)
                    {
                        if (Math.Abs(fourierFreq - aHarmFreq[i]) < 0.00001)
                        {
                            noDistSum2 -= Math.Pow(10, normAmp / 10);
                        }
                    }
                    ithData++;
                }

                //----Calculating Characteristic Variables----// 
                sinadNoHarm[isig] = 10 * Math.Log10(noDistSum2);
                sinad[isig] = 10 * Math.Log10(sum2);
                enob[isig] = (-sinad[isig] - 1.76) / 6.02;


                // Add the ATLAS Title
                chart1.Titles.Add(atlastitle[isig]);

                // Make the Charts look prettier, ATLAS style
                Font axisFont = new Font(FontFamily.GenericSansSerif, 10);
                chart1.ChartAreas[isig].BorderWidth = 2;
                chart1.ChartAreas[isig].BorderColor = Color.Black;
                chart1.ChartAreas[isig].BorderDashStyle = ChartDashStyle.Solid;
                chart1.ChartAreas[isig].AxisX.Title = "Freq. [MHz]";
                chart1.ChartAreas[isig].AxisX.TitleAlignment = StringAlignment.Far;
                chart1.ChartAreas[isig].AxisX.TitleFont = axisFont;
                chart1.ChartAreas[isig].AxisX.Minimum = 0;
                chart1.ChartAreas[isig].AxisX.Maximum = sampLength / 2 * 1.1;
                chart1.ChartAreas[isig].AxisY.Title = "20 log\x2081\x2080(|fft|/|max|) [dB]";
                chart1.ChartAreas[isig].AxisY.TitleAlignment = StringAlignment.Far;
                chart1.ChartAreas[isig].AxisY.TitleFont = axisFont;
                chart1.ChartAreas[isig].AxisY.Minimum = -140;
                chart1.ChartAreas[isig].AxisY.Maximum = 10;
                double gridwidth = sampLength / 10;
                for (int i = 0; i < 11; i++)
                {
                    // Make the X-axis labels actually correspond to frequency
                    chart1.ChartAreas[isig].AxisX.CustomLabels.Add(new CustomLabel());
                    chart1.ChartAreas[isig].AxisX.CustomLabels[i].FromPosition = gridwidth * i;
                    chart1.ChartAreas[isig].AxisX.CustomLabels[i].RowIndex = 0;
                    chart1.ChartAreas[isig].AxisX.CustomLabels[i].Text = (2*i).ToString();
                    chart1.ChartAreas[isig].AxisX.CustomLabels[i].GridTicks = GridTickTypes.None;
                    chart1.ChartAreas[isig].AxisX.LabelStyle.Angle = 0;
                }
                chart1.ChartAreas[isig].AxisX.MajorTickMark.Interval 
                    = chart1.ChartAreas[isig].AxisX2.MajorTickMark.Interval 
                    = sampLength * 20 / sampFreq / 10;
                chart1.ChartAreas[isig].AxisX.MinorTickMark.Interval 
                    = chart1.ChartAreas[isig].AxisX2.MinorTickMark.Interval
                    = sampLength * 20 / sampFreq / 10 / 4;
                chart1.ChartAreas[isig].AxisX.MinorTickMark.Enabled 
                    = chart1.ChartAreas[isig].AxisX2.MinorTickMark.Enabled
                    = true;
                chart1.ChartAreas[isig].AxisX.MinorTickMark.Size
                    = chart1.ChartAreas[isig].AxisX2.MinorTickMark.Size
                    = chart1.ChartAreas[isig].AxisX.MajorTickMark.Size / 2;
                chart1.ChartAreas[isig].AxisX.MajorGrid.Enabled 
                    = chart1.ChartAreas[isig].AxisX2.MajorGrid.Enabled 
                    = false;
                chart1.ChartAreas[isig].AxisX2.MajorTickMark.TickMarkStyle 
                    = chart1.ChartAreas[isig].AxisX2.MinorTickMark.TickMarkStyle
                    = TickMarkStyle.InsideArea;
                chart1.ChartAreas[isig].AxisX2.LabelStyle.Enabled = false;
                chart1.ChartAreas[isig].AxisX2.Enabled = AxisEnabled.True;
                chart1.ChartAreas[isig].AxisY.MajorTickMark.Interval 
                    = chart1.ChartAreas[isig].AxisY.Interval 
                    = chart1.ChartAreas[isig].AxisY2.MajorTickMark.Interval
                    = 20;
                chart1.ChartAreas[isig].AxisY.MinorTickMark.Interval 
                    = chart1.ChartAreas[isig].AxisY2.MinorTickMark.Interval 
                    = 5;
                chart1.ChartAreas[isig].AxisY.MinorTickMark.Enabled 
                    = chart1.ChartAreas[isig].AxisY2.MinorTickMark.Enabled
                    = true;
                chart1.ChartAreas[isig].AxisY.MinorTickMark.Size
                    = chart1.ChartAreas[isig].AxisY2.MinorTickMark.Size
                    = chart1.ChartAreas[isig].AxisY.MajorTickMark.Size / 2;
                chart1.ChartAreas[isig].AxisY.MajorGrid.Enabled 
                    = chart1.ChartAreas[isig].AxisY2.MajorGrid.Enabled
                    = false;
                chart1.ChartAreas[isig].AxisY2.MajorTickMark.TickMarkStyle
                    = chart1.ChartAreas[isig].AxisY2.MinorTickMark.TickMarkStyle
                    = TickMarkStyle.InsideArea;
                chart1.ChartAreas[isig].AxisY2.LabelStyle.Enabled = false;
                chart1.ChartAreas[isig].AxisY2.Enabled = AxisEnabled.True;


                // Determine the year of manufacturing from the chipID
                switch(ChipId){
                    case 1:
                        chipyear = "13"; break;
                    case 5:
                        chipyear = "14"; break;
                    default:
                        chipyear = ""; break;
                }

                // Add ID information to the chart
                var fftID = new Legend
                {
                    BackColor = Color.Transparent,
                    Docking = System.Windows.Forms.DataVisualization.Charting.Docking.Left,
                    InsideChartArea = chart1.ChartAreas[isig].Name,
                    LegendStyle = LegendStyle.Column,
                    Name = "ID Legend " + (isig + 1)
                };
                for (int i = 0; i < 4; i++)
                    fftID.CustomItems.Add(new LegendItem());
                fftID.CustomItems[0].Cells.Add(new LegendCell(""));
                fftID.CustomItems[1].Cells.Add(new LegendCell(String.Format("Nevis{0}", chipyear)));
                fftID.CustomItems[2].Cells.Add(new LegendCell(String.Format("Chip {0}", filenum)));
                fftID.CustomItems[3].Cells.Add(new LegendCell(String.Format("Ch. {0}", isig + 1)));
                Font idFont = new Font(FontFamily.GenericSansSerif, 11, FontStyle.Italic);
                for (int i = 1; i <= 3; i++)
                {
                    fftID.CustomItems[i].Cells[0].Font = idFont;
                    fftID.CustomItems[i].Cells[0].Alignment = ContentAlignment.MiddleLeft;
                }

               
                // Add QA information to the chart
                var fftInfo = new Legend
                {
                    BackColor = Color.Transparent,
                    InsideChartArea = chart1.ChartAreas[isig].Name,
                    LegendStyle = LegendStyle.Column,
                    Name = "Info Legend " + (isig+1)
                };
                for (int i = 0; i < 11; i++)
                    fftInfo.CustomItems.Add(new LegendItem());
                fftInfo.CustomItems[0].Cells.Add(new LegendCell(""));
                fftInfo.CustomItems[1].Cells.Add(new LegendCell(String.Format("SFDR: {0:F2}", sfdr[isig])));
                fftInfo.CustomItems[2].Cells.Add(new LegendCell(String.Format("SINAD: {0:F2}", sinad[isig])));
                fftInfo.CustomItems[3].Cells.Add(new LegendCell(String.Format("SNR: {0:F2}", sinadNoHarm[isig])));
                fftInfo.CustomItems[4].Cells.Add(new LegendCell(String.Format("ENOB: {0:F2}", enob[isig])));
                fftInfo.CustomItems[5].Cells.Add(new LegendCell("Spur Freq. [MHz]:"));
                for(int i = 6; i < 11; i++){
                    fftInfo.CustomItems[i].Cells.Add(new LegendCell(String.Format("{0:F2}", new string(outFreq[isig][i - 6]))));
                }
                Font infoFont = new Font(FontFamily.GenericSansSerif, 9, FontStyle.Italic);
                for (int i = 0; i < 11; i++)
                {
                    fftInfo.CustomItems[i].Cells[0].Font = infoFont;
                    fftInfo.CustomItems[i].Cells[0].Alignment = ContentAlignment.MiddleLeft;
                }



                chart1.Legends.Add(fftID);
                chart1.Legends.Add(fftInfo);
                chart1.Invalidate();
            }   //End FFT


            chart1.SaveImage(chartPath + "fft_" + filenum + ".png", ChartImageFormat.Png); // Save the FFT Charts to OUTPUTINL


            //----Write QA data to file----
            string fftFilePath = filepath + "QAfftparameters.txt";
            using (StreamWriter QAfft = File.AppendText(fftFilePath))
            {
                for (int isig = 0; isig < 4; isig++)
                {
                    string fftData = filenum.ToString() + ", " + (isig + 1).ToString() + ", "
                        + enob[isig].ToString() + ", "
                        + sfdr[isig].ToString() + ", "
                        + sinad[isig].ToString() + ", "
                        + sinadNoHarm[isig].ToString() + ", ";
                    for (int i = 0; i <= 4; i++)
                    {
                        fftData += new string(outFreq[isig][i]) + ", ";
                    }
                    fftData += DateTime.Now.Month + "/" + DateTime.Now.Day + "/" + DateTime.Now.Year + ", " + DateTime.Now.TimeOfDay;
                    QAfft.WriteLine(fftData);
                }
            }
            Console.Write("Written to File");
        }